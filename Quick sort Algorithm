#include <stdio.h>

// Function to partition the array and return the pivot index

int partition(int arr[], int low, int high) {

int pivot = arr[high];

int i = low - 1;

for (int j = low; j < high; j++) {

if (arr[j] <= pivot) {

i++;

// Swap arr[i] and arr[j]

int temp = arr[i];

arr[i] = arr[j];

arr[j] = temp;

}

}

// Swap arr[i+1] and arr[high] (put the pivot element in its correct position)

int temp = arr[i + 1];

arr[i + 1] = arr[high];

arr[high] = temp;

return i + 1;

}

// Function to implement Quick Sort

void quickSort(int arr[], int low, int high) {

if (low < high) {

// Find the pivot element such that elements smaller than pivot are on the left,

// and elements greater than pivot are on the right

int pivotIndex = partition(arr, low, high);

// Recursively sort the sub-arrays

quickSort(arr, low, pivotIndex - 1);

quickSort(arr, pivotIndex + 1, high);

}

}

// Function to print an array

void printArray(int arr[], int size) {

for (int i = 0; i < size; i++) {

printf("%d ", arr[i]);

}

printf("\n");

}

// Example usage with user input

int main() {

int size;

printf("Enter the size of the array: ");

scanf("%d", &size);

int arr[size];

printf("Enter the elements of the array: ");

for (int i = 0; i < size; i++) {

scanf("%d", &arr[i]);

}

printf("Original array: ");

printArray(arr, size);

quickSort(arr, 0, size - 1);

prin

tf("Sorted array: ");

printArray(arr, size);

return 0;

}
